{
  "_args": [
    [
      {
        "raw": "grant@3.8.0",
        "scope": null,
        "escapedName": "grant",
        "name": "grant",
        "rawSpec": "3.8.0",
        "spec": "3.8.0",
        "type": "version"
      },
      "C:\\wamp64\\www\\digital\\node_modules\\grant-express"
    ]
  ],
  "_from": "grant@3.8.0",
  "_id": "grant@3.8.0",
  "_inCache": true,
  "_location": "/grant",
  "_nodeVersion": "8.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/grant-3.8.0.tgz_1496851037754_0.6305003936868161"
  },
  "_npmUser": {
    "name": "simov",
    "email": "simeonvelichkov@gmail.com"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "grant@3.8.0",
    "scope": null,
    "escapedName": "grant",
    "name": "grant",
    "rawSpec": "3.8.0",
    "spec": "3.8.0",
    "type": "version"
  },
  "_requiredBy": [
    "/grant-express"
  ],
  "_resolved": "https://registry.npmjs.org/grant/-/grant-3.8.0.tgz",
  "_shasum": "c3133f864d11838b5ebeac2d7c882d976884df44",
  "_shrinkwrap": null,
  "_spec": "grant@3.8.0",
  "_where": "C:\\wamp64\\www\\digital\\node_modules\\grant-express",
  "author": {
    "name": "Simeon Velichkov",
    "email": "simeonvelichkov@gmail.com",
    "url": "https://simov.github.io"
  },
  "bugs": {
    "url": "https://github.com/simov/grant/issues"
  },
  "dependencies": {
    "deep-copy": "^1.2.0",
    "qs": "6.4.0",
    "request": "2.81.0"
  },
  "description": "OAuth Middleware for Express, Koa and Hapi",
  "devDependencies": {
    "body-parser": "^1.17.2",
    "coveralls": "^2.13.1",
    "eslint": "^3.19.0",
    "eslint-config-standard": "^10.2.1",
    "eslint-plugin-import": "^2.3.0",
    "eslint-plugin-node": "^5.0.0",
    "eslint-plugin-promise": "^3.5.0",
    "eslint-plugin-standard": "^3.0.1",
    "express": "^4.15.3",
    "express-session": "^1.15.3",
    "hapi": "^16.3.0",
    "istanbul": "^0.4.5",
    "koa": "1.4.0",
    "koa-bodyparser": "^2.5.0",
    "koa-convert": "^1.2.0",
    "koa-mount": "^1.3.0",
    "koa-qs": "^2.0.0",
    "koa-session": "^4.1.0",
    "mocha": "^3.4.2",
    "thunkify": "^2.1.2",
    "yar": "^8.1.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-Q8UN1j9JQmmb/Wf7PlYXJn92IjX9Tio21rEV5jOte/novOaZ/l0xMWNel7CDbRw0zqFEnYIIAyh1Cri2u3poUw==",
    "shasum": "c3133f864d11838b5ebeac2d7c882d976884df44",
    "tarball": "https://registry.npmjs.org/grant/-/grant-3.8.0.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "files": [
    "config/",
    "lib/",
    "CHANGELOG.md",
    "LICENSE",
    "README.md",
    "index.js"
  ],
  "gitHead": "6f7faaa6fd7729deed51ee0333f4bec4cfcd9575",
  "homepage": "https://github.com/simov/grant",
  "keywords": [
    "oauth",
    "oauth2",
    "authentication",
    "middleware",
    "express",
    "koa",
    "hapi"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "simov",
      "email": "simeonvelichkov@gmail.com"
    }
  ],
  "name": "grant",
  "optionalDependencies": {},
  "readme": "\n# Grant\n\n[![npm-version]][npm] [![travis-ci]][travis] [![coveralls-status]][coveralls]\n\n\n## 150+ Supported Providers / [OAuth Playground][grant-oauth]\n\n[`23andme`](https://api.23andme.com) | [`500px`](https://github.com/500px/api-documentation) | [`acton`](https://developer.act-on.com) | [`acuityscheduling`](https://developers.acuityscheduling.com) | [`aha`](http://www.aha.io/api) | [`amazon`](http://login.amazon.com/documentation) | [`angellist`](https://angel.co/api) | [`appnet`](https://developers.app.net) | [`asana`](https://asana.com/developers) | [`assembla`](http://api-doc.assembla.com) | [`axosoft`](http://developer.axosoft.com) | [`baidu`](http://developer.baidu.com/ms/oauth) | [`basecamp`](https://github.com/basecamp/bcx-api) | [`beatport`](https://oauth-api.beatport.com) | [`bitbucket`](https://confluence.atlassian.com/display/BITBUCKET) | [`bitly`](http://dev.bitly.com) | [`box`](https://developer.box.com) | [`buffer`](https://dev.buffer.com) | [`campaignmonitor`](https://www.campaignmonitor.com/api) | [`cheddar`](https://cheddarapp.com/developer) | [`clio`](http://api-docs.clio.com) | [`codeplex`](https://www.codeplex.com/site/developers) | [`coinbase`](https://developers.coinbase.com) | [`concur`](https://developer.concur.com) | [`constantcontact`](https://developer.constantcontact.com) | [`coursera`](https://tech.coursera.org) | [`dailymile`](http://www.dailymile.com/api/documentation) | [`dailymotion`](https://developer.dailymotion.com) | [`deezer`](http://developers.deezer.com) | [`delivery`](https://developers.delivery.com) | [`deputy`](http://api-doc.deputy.com) | [`deviantart`](https://www.deviantart.com/developers/) | [`digitalocean`](https://developers.digitalocean.com) | [`discogs`](http://www.discogs.com/developers) | [`discord`](https://discordapp.com/developers/docs/intro) | [`disqus`](https://disqus.com/api/docs) | [`docusign`](https://docs.docusign.com) | [`dribbble`](http://developer.dribbble.com) | [`dropbox`](https://www.dropbox.com/developers) | [`ebay`](https://go.developer.ebay.com) | [`echosign`](https://secure.echosign.com/public/docs/restapi/v3) | [`ecwid`](http://developers.ecwid.com) | [`edmodo`](https://developers.edmodo.com) | [`egnyte`](https://developers.egnyte.com) | [`elance`](https://www.elance.com/q/api2) | [`etsy`](https://www.etsy.com/developers) | [`eventbrite`](http://developer.eventbrite.com) | [`evernote`](https://dev.evernote.com) | [`everyplay`](https://developers.everyplay.com) | [`eyeem`](https://www.eyeem.com/developers) | [`facebook`](https://developers.facebook.com) | [`familysearch`](https://familysearch.org/developers) | [`feedly`](https://developer.feedly.com) | [`fitbit`](http://dev.fitbit.com) | [`flattr`](http://developers.flattr.net) | [`flickr`](https://www.flickr.com/services) | [`flowdock`](https://www.flowdock.com/api) | [`fluidsurveys`](http://docs.fluidsurveys.com) | [`formstack`](http://developers.formstack.com) | [`foursquare`](https://developer.foursquare.com) | [`freeagent`](https://dev.freeagent.com) | [`freshbooks`](https://www.freshbooks.com/developers) | [`geeklist`](http://hackers.geekli.st) | [`genius`](https://docs.genius.com) | [`getbase`](https://developers.getbase.com) | [`getpocket`](http://getpocket.com/developer) | [`gitbook`](https://developer.gitbook.com) | [`github`](https://developer.github.com) | [`gitlab`](http://doc.gitlab.com/ce/api) | [`gitter`](https://developer.gitter.im) | [`goodreads`](https://www.goodreads.com/api) | [`google`](https://developers.google.com) | [`groove`](https://www.groovehq.com/docs) | [`gumroad`](https://gumroad.com/api) | [`harvest`](http://help.getharvest.com/api) | [`hellosign`](https://www.hellosign.com/api) | [`heroku`](https://devcenter.heroku.com/categories/platform-api) | [`homeaway`](https://www.homeaway.com/platform) | [`iconfinder`](https://developer.iconfinder.com) | [`idme`](https://developer.id.me) | [`idonethis`](https://idonethis.com/api) | [`imgur`](https://api.imgur.com) | [`infusionsoft`](https://developer.infusionsoft.com) | [`instagram`](https://instagram.com/developer) | [`intuit`](https://developer.intuit.com) | [`jamendo`](https://devportal.jamendo.com/) | [`jawbone`](https://jawbone.com/up/developer) | [`jumplead`](https://developer.jumplead.com) | [`kakao`](https://developers.kakao.com) | [`letsfreckle`](http://developer.letsfreckle.com) | [`linkedin`](https://developer.linkedin.com) | [`live`](https://msdn.microsoft.com/en-us/library/hh243647.aspx) | [`lyft`](https://developer.lyft.com) | [`mailchimp`](https://apidocs.mailchimp.com) | [`mailup`](http://help.mailup.com/display/mailupapi/REST+API) | [`mapmyfitness`](https://developer.underarmour.com) | [`medium`](https://github.com/Medium/medium-api-docs) | [`meetup`](http://www.meetup.com/meetup_api) | [`microsoft`](http://graph.microsoft.io/en-us/docs/authorization/converged_auth) | [`mixcloud`](https://www.mixcloud.com/developers) | [`moves`](https://dev.moves-app.com) | [`moxtra`](https://developer.moxtra.com) | [`mydigipass`](https://developer.mydigipass.com) | [`myob`](http://developer.myob.com) | [`odesk`](https://developers.odesk.com) | [`openstreetmap`](http://wiki.openstreetmap.org/wiki/API_v0.6) | [`optimizely`](http://developers.optimizely.com) | [`paypal`](https://developer.paypal.com) | [`pinterest`](https://developers.pinterest.com) | [`plurk`](http://www.plurk.com/API) | [`podio`](https://developers.podio.com) | [`producteev`](https://www.producteev.com/api/doc) | [`producthunt`](https://api.producthunt.com/v1/docs) | [`projectplace`](https://service.projectplace.com/apidocs) | [`pushbullet`](https://docs.pushbullet.com) | [`ravelry`](http://www.ravelry.com/api) | [`rdio`](http://www.rdio.com/developers) | [`redbooth`](https://redbooth.com/api) | [`reddit`](http://www.reddit.com/dev/api) | [`runkeeper`](http://developer.runkeeper.com) | [`salesforce`](https://developer.salesforce.com) | [`shoeboxed`](https://github.com/Shoeboxed/api) | [`shopify`](https://docs.shopify.com/api) | [`skyrock`](http://www.skyrock.com/developer) | [`slack`](https://api.slack.com) | [`slice`](https://developer.slice.com) | [`smartsheet`](http://smartsheet-platform.github.io/api-docs) | [`smugmug`](https://api.smugmug.com) | [`socialpilot`](http://developer.socialpilot.co) | [`socrata`](http://dev.socrata.com) | [`soundcloud`](https://developers.soundcloud.com) | [`spotify`](https://developer.spotify.com) | [`square`](https://connect.squareup.com) | [`stackexchange`](https://api.stackexchange.com) | [`stocktwits`](https://stocktwits.com/developers) | [`stormz`](http://developer.stormz.me) | [`strava`](http://strava.github.io/api) | [`stripe`](https://stripe.com/docs) | [`surveygizmo`](http://apihelp.surveygizmo.com) | [`surveymonkey`](https://developer.surveymonkey.com) | [`thingiverse`](http://www.thingiverse.com/developers) | [`ticketbud`](https://api.ticketbud.com) | [`todoist`](https://developer.todoist.com) | [`trakt`](http://docs.trakt.apiary.io) | [`traxo`](https://developer.traxo.com) | [`trello`](https://developers.trello.com) | [`tripit`](https://www.tripit.com/developer) | [`tumblr`](https://www.tumblr.com/docs/en/api/v2) | [`twitch`](http://dev.twitch.tv) | [`twitter`](https://dev.twitter.com) | [`uber`](https://developer.uber.com) | [`underarmour`](https://developer.underarmour.com) | [`unsplash`](https://unsplash.com/documentation) | [`upwork`](https://developers.upwork.com) | [`uservoice`](https://developer.uservoice.com) | [`vend`](https://developers.vendhq.com) | [`venmo`](https://developer.venmo.com) | [`verticalresponse`](http://developers.verticalresponse.com) | [`vimeo`](https://developer.vimeo.com) | [`visualstudio`](https://www.visualstudio.com/integrate) | [`vk`](https://new.vk.com/dev) | [`weekdone`](https://weekdone.com/developer) | [`weibo`](http://open.weibo.com) | [`withings`](http://oauth.withings.com/api) | [`wordpress`](https://developer.wordpress.com) | [`wrike`](https://developers.wrike.com) | [`xero`](https://developer.xero.com) | [`xing`](https://dev.xing.com) | [`yahoo`](https://developer.yahoo.com) | [`yammer`](https://developer.yammer.com) | [`yandex`](https://tech.yandex.com) | [`zendesk`](https://developer.zendesk.com)\n\n\n## Table of Contents\n\n- [Providers][grant]\n- **Middleware**\n  - [Express][express]\n  - [Koa][koa]\n  - [Hapi][hapi]\n  - [Alternative Require][alternative-require]\n  - [Path Prefix][path-prefix]\n  - [Reserved Routes][reserved-routes]\n- **Configuration**\n  - [Basics][configuration]\n  - [Redirect URL][redirect-url]\n  - [Static Overrides][static-overrides]\n  - [Dynamic Override][dynamic-override]\n- **Advanced Configuration**\n  - [Custom Parameters][custom-parameters]\n  - [Custom Providers][custom-providers]\n  - [Development Environments][development-environments]\n  - [Programmatic Access][programmatic-access]\n  - [Sandbox Redirect URI][sandbox-redirect-uri]\n  - [Quirks][quirks]\n- **[Response Data][response-data]**\n- Misc\n  - [Typical Flow][typical-flow]\n  - [Get User Profile][get-user-profile]\n- [Examples][grant-examples]\n\n\n## Express\n\n```bash\nnpm install grant-express\n```\n\n```js\nvar express = require('express')\n  , session = require('express-session')\nvar Grant = require('grant-express')\n  , grant = new Grant({/*configuration - see below*/})\n\nvar app = express()\n// REQUIRED: (any session store - see ./examples/express-session)\napp.use(session({secret: 'grant'}))\n// mount grant\napp.use(grant)\n```\n\n\n## Koa\n\n```bash\nnpm install grant-koa\n```\n\n```js\nvar koa = require('koa')\n  , session = require('koa-session')\n  , mount = require('koa-mount')\nvar Grant = require('grant-koa')\n  , grant = new Grant({/*configuration - see below*/})\n\nvar app = koa()\n// REQUIRED: (any session store - see ./examples/koa-session)\napp.keys = ['grant']\napp.use(session(app))\n// mount grant\napp.use(mount(grant))\n```\n\n\n## Hapi\n\n```bash\nnpm install grant-hapi\n```\n\n```js\nvar Hapi = require('hapi')\n  , yar = require('yar')\nvar Grant = require('grant-hapi')\n  , grant = new Grant()\n\nvar server = new Hapi.Server()\nserver.register([\n  // REQUIRED: (any session store - see ./examples/hapi-session)\n  {\n    register: yar,\n    options: {cookieOptions: {password: 'grant', isSecure: false}}\n  },\n  // register grant\n  {\n    register: grant,\n    options: {/*configuration - see below*/}\n  }\n], function (err) {\n  server.start()\n})\n```\n\n\n## Alternative Require\n\nAlternatively you can require Grant directly *(each pair is identical)*:\n\n```js\n// Express\nvar Grant = require('grant-express')\nvar Grant = require('grant').express()\n// Koa\nvar Grant = require('grant-koa')\nvar Grant = require('grant').koa()\n// Hapi\nvar Grant = require('grant-hapi')\nvar Grant = require('grant').hapi()\n```\n\n> Koa requires one additional dependency: `thunkify`\n\n\n## Path Prefix\n\nYou can mount Grant under specific path prefix:\n\n```js\n// Express\napp.use('/path/prefix', grant)\n// Koa\napp.use(mount('/path/prefix', grant))\n// Hapi\n{register: grant, options: options, routes: {prefix: '/path/prefix'}}\n```\n\nIn this case it is required to set the path prefix using the `path` configuration option for the server key:\n\n```js\n{\n  \"server\": {\n    \"protocol\": \"...\",\n    \"host\": \"...\",\n    \"path\": \"/path/prefix\"\n  }\n}\n```\n\nLastly that path prefix should be specified in your OAuth application's redirect URL as well:\n\n```\n[protocol]://[host][path]/connect/[provider]/callback\n```\n\nIn case you want your callback routes prefixed, set them accordingly:\n\n```js\n{\n  \"facebook\": {\n    \"callback\": \"/path/prefix/handle_facebook_callback\"\n  }\n}\n```\n\n\n## Reserved Routes\n\n```\n/connect/:provider/:override?\n/connect/:provider/callback\n```\n\n\n## Configuration\n\n```js\n{\n  \"server\": {\n    \"protocol\": \"http\",\n    \"host\": \"localhost:3000\",\n    \"callback\": \"/callback\",\n    \"transport\": \"session\",\n    \"state\": true\n  },\n  \"provider1\": {\n    \"key\": \"...\",\n    \"secret\": \"...\",\n    \"scope\": [\"scope1\", \"scope2\", ...],\n    \"callback\": \"/provider1/callback\"\n  },\n  \"provider2\": {...},\n  ...\n}\n```\n\n- **server** - configuration about your server\n  - **protocol** - either `http` or `https`\n  - **host** - your server's host name `localhost:3000` | `dummy.com:5000` | `mysite.com` ...\n  - **path** - path prefix to use for the Grant middleware *(defaults to empty string if omitted)*\n  - **callback** - common callback for all providers in your config `/callback` | `/done` ...\n  - **transport** - transport to use to deliver the response data in your final callback `querystring` | `session` *(defaults to querystring if omitted)*\n  - **state** - generate random state string on each authorization attempt `true` | `false` *(OAuth2 only, defaults to false if omitted)*\n- **provider1** - any [supported provider][grant] `facebook` | `twitter` ...\n  - **key** - `consumer_key` or `client_id` of your app\n  - **secret** - `consumer_secret` or `client_secret` of your app\n  - **scope** - array of OAuth scopes to request\n  - **callback** - specific callback to use for this provider *(overrides the global one specified under the `server` key)*\n  - **custom_params** - custom authorization parameters *(see the [Custom Parameters][custom-parameters] section)*\n\n*(additionally any of the [reserved keys][reserved-keys] can be overriden for a provider)*\n\n\n## Redirect URL\n\nFor `redirect` URL of your OAuth application you should **always** use this format:\n\n```\n[protocol]://[host]/connect/[provider]/callback\n```\n\nWhere `protocol` and `host` should match the ones from which you initiate the OAuth flow, and `provider` is the provider's name from the list of [supported providers][grant].\n\nThis `redirect` URL is used internally by Grant. You will receive the [response data][response-data] from the OAuth flow inside the route specified in the `callback` key of your Grant configuration.\n\n> See the [Path Prefix][path-prefix] section on how to configure the redirect URL when using the `path` configuration option.\n\n\n## Static Overrides\n\nYou can add arbitrary `{object}` keys inside your provider's configuration to create sub configurations that override the *global* settings for that provider:\n\n```js\n// navigate to /connect/facebook\n\"facebook\": {\n  \"key\": \"...\",\n  \"secret\": \"...\",\n  // by default request publish permissions\n  \"scope\": [\"publish_actions\", \"publish_stream\"],\n  // set specific callback route on your server for this provider\n  \"callback\": \"/facebook/callback\",\n  // navigate to /connect/facebook/groups\n  \"groups\": {\n    // request only group permissions\n    \"scope\": [\"user_groups\", \"friends_groups\"]\n  },\n  // navigate to /connect/facebook/pages\n  \"pages\": {\n    // request only page permissions\n    \"scope\": [\"manage_pages\"],\n    // additionally use specific callback route on your server for this override\n    \"callback\": \"/facebook_pages/callback\"\n  }\n}\n```\n\n*(the custom key names cannot be one of the [reserved keys][reserved-keys])*\n\n\n## Dynamic Override\n\nAdditionally you can make a `POST` request to the `/connect/:provider/:override?` route to override your provider's configuration dynamically on each request:\n\n```html\n<form action=\"/connect/facebook\" method=\"post\" accept-charset=\"utf-8\">\n  <input name=\"state\" type=\"text\" value=\"\" />\n  <input name=\"scope\" type=\"checkbox\" value=\"user_groups\" />\n  <input name=\"scope\" type=\"checkbox\" value=\"manage_pages\" />\n  <button>submit</button>\n</form>\n```\n\nKeep in mind that in this case you'll have to mount the `body-parser` middleware for Express or Koa before mounting Grant:\n\n```js\n// express\nvar bodyParser = require('body-parser')\napp.use(bodyParser.urlencoded({extended: true}))\napp.use(grant)\n// koa\nvar bodyParser = require('koa-bodyparser')\napp.use(bodyParser())\napp.use(mount(grant))\n```\n\nAlternatively you can make a `GET` request to the `/connect/:provider/:override?` route:\n\n```js\napp.get('/connect_facebook', function (req, res) {\n  // generate random state parameter on each authorization attempt\n  var state = (Math.floor(Math.random() * 999999) + 1)\n  res.redirect('/connect/facebook?state=' + state)\n})\n```\n\n\n## Custom Parameters\n\nSome providers may employ custom authorization parameters outside of the ones specified in the [configuration][configuration] section. You can pass those custom parameters using the `custom_params` option:\n\n```js\n\"google\": {\n  \"custom_params\": {\"access_type\": \"offline\"}\n},\n\"reddit\": {\n  \"custom_params\": {\"duration\": \"permanent\"}\n},\n\"trello\": {\n  \"custom_params\": {\"name\": \"my app\", \"expiration\": \"never\"}\n}\n```\n\n> Additionally any custom parameter that is not a [reserved][reserved-keys] key, and is listed under the `custom_parameters` array for that provider, can be defined along with the rest of the options.\n\nRefer to the provider's OAuth documentation, and the Grant's [OAuth configuration][oauth-config] *(search for `custom_parameters`)*.\n\n\n## Custom Providers\n\nIn case you have a private OAuth provider that you don't want to be part of the [officially supported][oauth-config] ones, you can define it in your configuration by adding a custom key for it.\n\nIn this case you have to specify all of the required provider keys by yourself:\n\n```js\n{\n  \"server\": {\n    \"protocol\": \"https\",\n    \"host\": \"mywebsite.com\"\n  },\n  \"mywebsite\": {\n    \"authorize_url\": \"https://mywebsite.com/authorize\",\n    \"access_url\": \"https://mywebsite.com/token\",\n    \"oauth\": 2,\n    \"key\": \"[CLIENT_ID]\",\n    \"secret\": \"[CLIENT_SECRET]\",\n    \"scope\": [\"read\", \"write\"]\n  }\n}\n```\n\nTake a look at the [OAuth configuration][oauth-config] to see how various providers are configured.\n\n\n## Development Environments\n\nYou can easily configure different development environments:\n\n```js\n{\n  \"development\": {\n    \"server\": {\"protocol\": \"http\", \"host\": \"dummy.com:3000\"},\n    \"facebook\": {\n      \"key\": \"development OAuth app credentials\",\n      \"secret\": \"development OAuth app credentials\"\n    },\n    \"twitter\": {...}, ...\n  },\n  \"staging\": {\n    \"server\": {\"protocol\": \"https\", \"host\": \"staging.mywebsite.com\"},\n    \"facebook\": {\n      \"key\": \"staging OAuth app credentials\",\n      \"secret\": \"staging OAuth app credentials\"\n    },\n    \"twitter\": {...}, ...\n  },\n  \"production\": {\n    \"server\": {\"protocol\": \"https\", \"host\": \"mywebsite.com\"},\n    \"facebook\": {\n      \"key\": \"production OAuth app credentials\",\n      \"secret\": \"production OAuth app credentials\"\n    },\n    \"twitter\": {...}, ...\n  }\n}\n```\n\nThen you can pass the environment flag:\n\n```bash\nNODE_ENV=production node app.js\n```\n\nAnd use it in your application:\n\n```js\nvar config = require('./config.json')\nvar grant = new Grant(config[process.env.NODE_ENV || 'development'])\n```\n\n\n## Programmatic Access\n\nOnce you initialize a new instance of Grant:\n\n```js\nvar grant = new Grant(require('./config'))\n```\n\nYou get a special `config` property attached to that instance. It contains the generated configuration data for all of the providers defined in your config file.\n\n> In case of dynamic access to a non pre-configured provider, it is automatically added to the `config` list on first access to the `/connect/:provider` route.\n\nThere is a `_config` property attached as well, which contains the data from the [config/oauth.json][oauth-config] file as well as all of the configuration methods used internally by Grant.\n\n> Typically you don't want to use the `_config` property directly. Also note that changes made to the `config` property are per Grant instance, where changes to the `_config` property are global.\n\n\n## Sandbox Redirect URI\n\nVery rarely you may need to override the default `redirect_uri` that Grant generates for you.\n\nFor example Feedly supports only `http://localhost` as redirect URL of their Sandbox OAuth application, and it won't allow the `http://localhost/connect/feedly/callback` path:\n\n```js\n\"feedly\": {\n  \"redirect_uri\": \"http://localhost\"\n}\n```\n\nIn case you override the `redirect_uri` in your config, you'll have to redirect the user to the `[protocol]://[host]/connect/[provider]/callback` route that Grant uses to execute the last step of the OAuth flow:\n\n```js\nvar qs = require('querystring')\n\napp.get('/', function (req, res) {\n  if (process.env.NODE_ENV === 'development' &&\n      req.session.grant &&\n      req.session.grant.provider === 'feedly' &&\n      req.query.code\n  ) {\n    res.redirect('/connect/' + req.session.grant.provider + '/callback?'\n      + qs.stringify(req.query))\n  }\n})\n```\n\nAfter that you will receive the results from the OAuth flow inside the route specified in the `callback` key of your configuration.\n\n\n## Quirks\n\n\n##### Subdomain\n\nSome providers require you to set your company name as a *subdomain* in the OAuth URLs. For example for Freshbooks, Shopify, Vend and Zendesk you can set that value through the `subdomain` option:\n\n```js\n\"shopify\": {\n  \"subdomain\": \"mycompany\"\n}\n```\n\nThen Grant will generate the correct OAuth URLs:\n\n```js\n\"authorize_url\": \"https://mycompany.myshopify.com/admin/oauth/authorize\",\n\"access_url\": \"https://mycompany.myshopify.com/admin/oauth/access_token\"\n```\n\n> Alternatively you can override the entire `request_url`, `authorize_url` and `access_url` in your configuration.\n\n\n##### Sandbox URLs\n\nSome providers may have *sandbox* URLs for testing. To use them just override the entire `request_url`, `authorize_url` and `access_url` in your configuration *(notice the `sandbox` bits)*:\n\n```js\n\"paypal\": {\n  \"authorize_url\": \"https://www.sandbox.paypal.com/webapps/auth/protocol/openidconnect/v1/authorize\",\n  \"access_url\": \"https://api.sandbox.paypal.com/v1/identity/openidconnect/tokenservice\"\n},\n\"evernote\": {\n  \"request_url\": \"https://sandbox.evernote.com/oauth\",\n  \"authorize_url\": \"https://sandbox.evernote.com/OAuth.action\",\n  \"access_url\": \"https://sandbox.evernote.com/oauth\"\n}\n```\n\n\n##### Ebay\n\nSet the redirect URL of your OAuth app as usual `[protocol]://[host]/connect/ebay/callback`. Then Ebay will generate a special string called *RuName (eBay Redirect URL name)* that you need to set as `redirect_uri` in Grant:\n\n```js\n\"ebay\": {\n  \"redirect_uri\": \"[RUNAME]\"\n}\n```\n\n\n##### Flickr, Optimizely\n\nFlickr uses a custom authorization parameter to pass its scopes called `perms`, and Optimizely uses `scopes`. However you should use the regular `scope` option in your configuration:\n\n```js\n\"flickr\": {\n  \"scope\": [\"write\"]\n}\n\"optimizely\": {\n  \"scope\": [\"all\"]\n}\n```\n\n\n##### SurveyMonkey\n\nFor SurveyMonkey set your Mashery user name as `key` and your application key as `api_key`:\n\n```js\n\"surveymonkey\": {\n  \"key\": \"[MASHERY_USER_NAME]\",\n  \"secret\": \"[CLIENT_SECRET]\",\n  \"api_key\": \"[CLIENT_ID]\"\n}\n```\n\n\n##### Fitbit, LinkedIn, ProjectPlace\n\nInitially these providers supported only OAuth1, so the `fitbit` and `linkedin` names are used for that. To use their OAuth2 flow append `2` at the end of their names:\n\n```js\n\"fitbit2\": {\n  // then navigate to /connect/fitbit2\n},\n\"linkedin2\": {\n  // then navigate to /connect/linkedin2\n},\n\"projectplace2\": {\n  // then navigate to /connect/projectplace2\n}\n```\n\n\n## Response Data\n\nThe OAuth response data is returned as a querystring in your **final** callback - the one you specify in the `callback` key of your Grant configuration.\n\nAlternatively the response data can be returned in the session, see the [configuration][configuration] section above and the [session transport][session-transport-example] example.\n\n\n#### OAuth1\n\nFor OAuth1 the `access_token` and the `access_secret` are accessible directly, `raw` contains the raw response data:\n\n```js\n{\n  access_token: '...',\n  access_secret: '...',\n  raw: {\n    oauth_token: '...',\n    oauth_token_secret: '...',\n    some: 'other data'\n  }\n}\n```\n\n\n#### OAuth2\n\nFor OAuth2 the `access_token` and the `refresh_token` (if present) are accessible directly, `raw` contains the raw response data:\n\n```js\n{\n  access_token: '...',\n  refresh_token: '...',\n  raw: {\n    access_token: '...',\n    refresh_token: '...',\n    some: 'other data'\n  }\n}\n```\n\n\n#### Error\n\nIn case of an error, the `error` key will be populated with the raw error data:\n\n```js\n{\n  error: {\n    some: 'error data'\n  }\n}\n```\n\n\n## Typical Flow\n\n1. Register OAuth application on your provider's web site.\n2. For `redirect` URL of your OAuth application **always** use this format:\n  `[protocol]://[host]/connect/[provider]/callback`\n3. Create a `config.json` file containing:\n\n  ```js\n  \"server\": {\n    \"protocol\": \"https\",\n    \"host\": \"mywebsite.com\"\n  },\n  \"facebook\": {\n    \"key\": \"[CLIENT_ID]\",\n    \"secret\": \"[CLIENT_SECRET]\",\n    \"callback\": \"/handle_facebook_callback\"\n  },\n  \"twitter\": {\n    \"key\": \"[CONSUMER_KEY]\",\n    \"secret\": \"[CONSUMER_SECRET]\",\n    \"callback\": \"/handle_twitter_callback\"\n  }\n  ```\n4. Initialize Grant and mount it:\n\n  ```js\n  // Express\n  var express = require('express')\n    , session = require('express-session')\n  var Grant = require('grant-express')\n    , grant = new Grant(require('./config.json'))\n  var app = express()\n  app.use(session({secret: 'grant'}))\n  app.use(grant)\n  // or Koa\n  // or Hapi\n  ```\n5. Navigate to `/connect/facebook` to initiate the OAuth flow for Facebook, or navigate to `/connect/twitter` to initiate the OAuth flow for Twitter.\n6. Once the OAuth flow is completed you will receive the response data in the `/handle_facebook_callback` route for Facebook, or in the `/handle_twitter_callback` route for Twitter.\n\n*(also take a look at the [examples][grant-examples])*\n\n\n## Get User Profile\n\nOnce you have your access tokens secured, you can start making authorized requests on behalf of your users. **[Purest][purest]** is a generic REST API client library that supports **hundreds** of REST API providers.\n\nFor example, you may want to get the user's profile after the OAuth flow has completed:\n\n```js\nvar request = require('request')\nvar purest = require('purest')({request})\nvar config = require('@purest/config')\nvar facebook = purest({provider: 'facebook', config})\nvar twitter = purest({provider: 'twitter', config,\n  key: '[CONSUMER_KEY]', secret: '[CONSUMER_SECRET]'\n})\n\nfacebook\n  .get('me')\n  .auth('[ACCESS_TOKEN]')\n  .request(function (err, res, body) {\n    // here body is a parsed JSON object containing\n    // id, first_name, last_name, gender, username, ...\n  })\n\ntwitter\n  .get('users/show')\n  .qs({screen_name: 'nodejs'})\n  .auth('[ACCESS_TOKEN]', '[ACCESS_SECRET]')\n  .request(function (err, res, body) {\n    // here body is a parsed JSON object containing\n    // id, screen_name, ...\n  })\n```\n\n> Full list of all providers and how to get their *user profile* endpoint can be found [here][purest-user].\n\n\n  [npm-version]: https://img.shields.io/npm/v/grant.svg?style=flat-square (NPM Version)\n  [travis-ci]: https://img.shields.io/travis/simov/grant/master.svg?style=flat-square (Build Status)\n  [coveralls-status]: https://img.shields.io/coveralls/simov/grant.svg?style=flat-square (Test Coverage)\n\n  [npm]: https://www.npmjs.com/package/grant\n  [travis]: https://travis-ci.org/simov/grant\n  [coveralls]: https://coveralls.io/r/simov/grant?branch=master\n\n  [grant-oauth]: https://grant.outofindex.com\n  [purest]: https://github.com/simov/purest\n  [purest-user]: https://github.com/simov/purest/blob/2.x/test/request/get.js\n  [request]: https://github.com/request/request\n\n  [oauth-config]: https://github.com/simov/grant/blob/master/config/oauth.json\n  [reserved-keys]: https://github.com/simov/grant/blob/master/config/reserved.json\n  [grant-examples]: https://github.com/simov/grant/tree/master/examples\n  [session-transport-example]: https://github.com/simov/grant/blob/master/examples/session-transport/app.js\n\n  [grant]: #grant\n  [table-of-contents]: #table-of-contents\n  [express]: #express\n  [koa]: #koa\n  [hapi]: #hapi\n  [alternative-require]: #alternative-require\n  [path-prefix]: #path-prefix\n  [reserved-routes]: #reserved-routes\n  [configuration]: #configuration\n  [redirect-url]: #redirect-url\n  [static-overrides]: #static-overrides\n  [dynamic-override]: #dynamic-override\n  [custom-parameters]: #custom-parameters\n  [custom-providers]: #custom-providers\n  [development-environments]: #development-environments\n  [programmatic-access]: #programmatic-access\n  [sandbox-redirect-uri]: #sandbox-redirect-uri\n  [quirks]: #quirks\n  [response-data]: #response-data\n  [typical-flow]: #typical-flow\n  [get-user-profile]: #get-user-profile\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/simov/grant.git"
  },
  "scripts": {
    "lint": "eslint lib/ test/ examples/ && echo Lint Passed",
    "test": "npm run lint && npm run test-ci",
    "test-ci": "mocha --recursive test/",
    "test-cov": "istanbul cover _mocha -- --recursive test/"
  },
  "version": "3.8.0"
}
