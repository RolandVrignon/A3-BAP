{
  "_args": [
    [
      {
        "raw": "uppy",
        "scope": null,
        "escapedName": "uppy",
        "name": "uppy",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\wamp64\\www\\digital"
    ]
  ],
  "_from": "uppy@latest",
  "_id": "uppy@0.22.1",
  "_inCache": true,
  "_location": "/uppy",
  "_nodeVersion": "6.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/uppy-0.22.1.tgz_1515525766819_0.8790453744586557"
  },
  "_npmUser": {
    "name": "arturi",
    "email": "artur@arturpaikin.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {
    "after": "0.8.2",
    "async-limiter": "1.0.0",
    "backo2": "1.0.2",
    "base64-arraybuffer": "0.1.5",
    "blob": "0.0.4",
    "component-bind": "1.0.0",
    "component-inherit": "0.0.3",
    "debug": "2.6.9",
    "has-binary2": "1.0.2",
    "has-cors": "1.1.0",
    "indexof": "0.0.1",
    "object-component": "0.0.3",
    "parseqs": "0.0.5",
    "parseuri": "0.0.5",
    "requires-port": "1.0.0",
    "safe-buffer": "5.1.1",
    "to-array": "0.1.4",
    "yeast": "0.1.2"
  },
  "_requested": {
    "raw": "uppy",
    "scope": null,
    "escapedName": "uppy",
    "name": "uppy",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/uppy/-/uppy-0.22.1.tgz",
  "_shasum": "17f82d7d8bc07547be82c39753476054529387af",
  "_shrinkwrap": null,
  "_spec": "uppy",
  "_where": "C:\\wamp64\\www\\digital",
  "bugs": {
    "url": "https://github.com/transloadit/uppy/issues"
  },
  "dependencies": {
    "classnames": "^2.2.5",
    "cuid": "^1.3.8",
    "drag-drop": "2.13.2",
    "es6-promise": "3.2.1",
    "get-form-data": "^1.2.5",
    "lodash.throttle": "4.1.1",
    "mime-match": "^1.0.2",
    "namespace-emitter": "^2.0.0",
    "preact": "^8.2.7",
    "prettier-bytes": "1.0.4",
    "prop-types": "^15.5.10",
    "socket.io-client": "2.0.2",
    "tus-js-client": "^1.4.5",
    "url-parse": "1.1.9",
    "whatwg-fetch": "2.0.3"
  },
  "description": "Extensible file upload widget with support for drag&drop, resumable uploads, previews, restrictions, file processing/encoding, remote providers like Dropbox and Google Drive, S3 and more :dog:",
  "devDependencies": {
    "autoprefixer": "6.3.7",
    "babel-cli": "6.11.4",
    "babel-core": "6.13.2",
    "babel-eslint": "6.1.2",
    "babel-jest": "^22.0.0",
    "babel-plugin-add-module-exports": "0.2.1",
    "babel-plugin-es6-promise": "1.0.0",
    "babel-plugin-transform-object-assign": "6.8.0",
    "babel-plugin-transform-proto-to-assign": "6.9.0",
    "babel-plugin-transform-react-jsx": "^6.24.1",
    "babel-polyfill": "6.9.1",
    "babel-preset-es2015": "6.24.0",
    "babel-register": "6.9.0",
    "babelify": "7.3.0",
    "browser-sync": "2.18.8",
    "browserify": "14.1.0",
    "chalk": "1.1.3",
    "cssnano": "3.7.3",
    "disc": "1.3.2",
    "eslint": "^3.19.0",
    "eslint-config-standard": "^10.2.1",
    "eslint-config-standard-preact": "^1.1.6",
    "eslint-plugin-import": "^2.7.0",
    "eslint-plugin-jest": "^21.5.0",
    "eslint-plugin-node": "^4.2.3",
    "eslint-plugin-promise": "^3.5.0",
    "eslint-plugin-standard": "^3.0.1",
    "exorcist": "0.4.0",
    "fakefile": "0.0.8",
    "glob": "7.1.1",
    "isomorphic-fetch": "2.2.1",
    "jest": "^22.0.0",
    "lint-staged": "2.0.2",
    "minify-stream": "^1.1.0",
    "mkdirp": "0.5.1",
    "multi-glob": "1.0.1",
    "next-update": "1.2.2",
    "nock": "8.0.0",
    "node-sass": "4.5.0",
    "nodemon": "1.8.1",
    "npm-run-all": "2.3.0",
    "onchange": "3.2.1",
    "postcss": "5.1.0",
    "pre-commit": "1.1.3",
    "redux": "^3.7.2",
    "sass": "0.5.0",
    "tape": "^4.8.0",
    "temp-write": "^3.4.0",
    "tinyify": "^1.0.0",
    "uppy-server": "0.0.7",
    "watchify": "3.7.0",
    "wdio-mocha-framework": "^0.5.11",
    "wdio-sauce-service": "^0.4.4",
    "wdio-static-server-service": "^1.0.1",
    "webdriverio": "^4.9.5"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-iOyk/NoLJNLup8uMsVrKREUlzZ+B4TpMEpFmrCXKIYUqK8/MGHwRveWTCpL7Bli7S09TgbQK05Yowt3Ow+yJWg==",
    "shasum": "17f82d7d8bc07547be82c39753476054529387af",
    "tarball": "https://registry.npmjs.org/uppy/-/uppy-0.22.1.tgz"
  },
  "files": [
    "src/",
    "lib/",
    "dist/",
    "test/",
    "bin/",
    "examples/"
  ],
  "gitHead": "2757e50d630fa2f75cc67f93389b3253b4b28e88",
  "homepage": "https://github.com/transloadit/uppy#readme",
  "jest": {
    "testPathIgnorePatterns": [
      "lib"
    ]
  },
  "jsnext:main": "src/index.js",
  "keywords": [
    "file uploader",
    "drag-drop",
    "progress",
    "preview",
    "resumable uploads",
    "xhr",
    "tus",
    "s3",
    "google drive",
    "dropbox",
    "webcam"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": "eslint"
  },
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "arturi",
      "email": "artur@arturpaikin.com"
    },
    {
      "name": "goto-bus-stop",
      "email": "rene@kooi.me"
    },
    {
      "name": "ifedapoolarewaju",
      "email": "ifedapoolarewaju@gmail.com"
    },
    {
      "name": "kvz",
      "email": "kevin@vanzonneveld.net"
    },
    {
      "name": "tim-kos",
      "email": "tim@debuggable.com"
    }
  ],
  "name": "uppy",
  "optionalDependencies": {},
  "pre-commit": "lint-staged",
  "readme": "# [Uppy](https://uppy.io)\n\n<img src=\"https://uppy.io/images/logos/uppy-dog-head-arrow.svg\" width=\"120\" alt=\"Uppy logo: a superman puppy in a pink suit\" align=\"right\">\n\n<a href=\"https://www.npmjs.com/package/uppy\"><img src=\"https://img.shields.io/npm/v/uppy.svg?style=flat-square\"></a>\n<a href=\"https://travis-ci.org/transloadit/uppy\"><img src=\"https://img.shields.io/travis/transloadit/uppy/master.svg?style=flat-square\" alt=\"Build Status\"></a>\n\nUppy is a sleek, modular file uploader that integrates seamlessly with any application. It‚Äôs fast, easy to use and lets you worry about more important problems than building a file uploader.\n\n- **Fetch** files from local disk, Google Drive, Dropbox, Instagram, or snap and record selfies with a¬†camera;\n- **Preview** and edit metadata with a nice interface;\n- **Upload** to the final destination, optionally process/encode\n\n**[Read the docs](https://uppy.io/docs)** | **[Try Uppy](https://uppy.io/examples/dashboard/)**\n\nUppy is being developed by the [Transloadit](https://transloadit.com) team.\n\n## Example\n\n<img width=\"700\" alt=\"Uppy UI Demo: modal dialog with a few selected files and an upload button\" src=\"https://github.com/transloadit/uppy/raw/master/uppy-screenshot.jpg\">\n\nCode used in the above example:\n\n```js\nconst Uppy = require('uppy/lib/core')\nconst Dashboard = require('uppy/lib/plugins/Dashboard')\nconst GoogleDrive = require('uppy/lib/plugins/GoogleDrive')\nconst Instagram = require('uppy/lib/plugins/Instagram')\nconst Webcam = require('uppy/lib/plugins/Webcam')\nconst Tus = require('uppy/lib/plugins/Tus')\n\nconst uppy = Uppy({ autoProceed: false })\n  .use(Dashboard, { trigger: '#select-files' })\n  .use(GoogleDrive, { target: Dashboard, host: 'https://server.uppy.io' })\n  .use(Instagram, { target: Dashboard, host: 'https://server.uppy.io' })\n  .use(Webcam, { target: Dashboard })\n  .use(Tus, { endpoint: 'https://master.tus.io/files/' })\n  .run()\n  .on('complete', (result) => {\n    console.log('Upload result:', result)\n  })\n```\n\n**[Try it online](https://uppy.io/examples/dashboard/)** or **[read the docs](https://uppy.io/docs)** for more details on how to use Uppy and its plugins.\n\n## Features\n\n- Lightweight, modular plugin-based architecture, easy on dependencies :zap:\n- Resumable file uploads via the open [tus](https://tus.io/) standard, so large uploads survive network hiccups\n- Supports picking files from: Webcam, Dropbox, Google Drive, Instagram, bypassing the user‚Äôs device where possible, syncing between servers directly via [uppy-server](https://github.com/transloadit/uppy-server)\n- Works great with file encoding and processing backends, such as [Transloadit](https://transloadit.com), works great without (just roll your own Apache/Nginx/Node/FFmpeg/etc backend)\n- Sleek user interface :sparkles:\n- Optional file recovery (after a browser crash) with [Golden Retriever](https://uppy.io/docs/golden-retriever/)\n- Speaks multiple languages (i18n) :earth_africa:\n- Built with accessibility in mind\n- Free for the world, forever (as in beer üç∫, pizza üçï, and liberty üóΩ)\n- Cute as a puppy, also accepts cat pictures :dog:\n\n## Installation\n\n``` bash\n$ npm install uppy --save\n```\n\nWe recommend installing from npm and then using a module bundler such as [Webpack](http://webpack.github.io/), [Browserify](http://browserify.org/) or [Rollup.js](http://rollupjs.org/).\n\nAdd CSS [uppy.min.css](https://unpkg.com/uppy/dist/uppy.min.css), either to `<head>` of your HTML page or include in JS, if your bundler of choice supports it ‚Äî transforms and plugins are available for Browserify and Webpack.\n\nAlternatively, you can also use a pre-built bundle, for example from [unpkg CDN](https://unpkg.com/uppy/). In that case `Uppy` will attach itself to the global `window.Uppy` object.\n\n> ‚ö†Ô∏è The bundle currently consists of most Uppy plugins, so this method is not recommended for production, as your users will have to download all plugins, when you are likely using just a few.\n\n1\\. Add a script to the bottom of `<body>`:\n\n``` html\n<script src=\"https://unpkg.com/uppy\"></script>\n```\n\n2\\. Add CSS to `<head>`:\n``` html\n<link href=\"https://unpkg.com/uppy/dist/uppy.min.css\" rel=\"stylesheet\">\n```\n\n3\\. Initialize:\n\n``` html\n<div class=\"UppyDragDrop\"></div>\n<script>\n  var uppy = Uppy.Core()\n  uppy.use(Uppy.DragDrop, { target: '.UppyDragDrop' })\n  uppy.use(Uppy.Tus, { endpoint: '//master.tus.io/files/' })\n  uppy.run()\n</script>\n```\n\n## Documentation\n\n- [Uppy](https://uppy.io/docs/uppy/) ‚Äî full list of options, methods and events.\n- [Plugins](https://uppy.io/docs/plugins/) ‚Äî list of Uppy plugins and their options.\n- [Server](https://uppy.io/docs/server/) ‚Äî setting up and running an Uppy Server instance, which adds support for Instagram, Dropbox, Google Drive and other remote sources.\n- [React](https://uppy.io/docs/react/) ‚Äî components to integrate Uppy UI plugins with React apps.\n- Architecture & Making a Plugin ‚Äî how to write a plugin for Uppy [documentation in progress].\n\n## Plugins\n\n- `Tus` ‚Äî resumable uploads via the open [tus](http://tus.io) standard\n- `XHRUpload` ‚Äî regular uploads for any backend out there (like Apache, Nginx)\n- `Transloadit` ‚Äî support for [Transloadit](http://transloadit.com)‚Äôs robust file uploading and encoding backend\n- `Dashboard` ‚Äî universal UI with previews, progress bars, metadata editor and all the cool stuff\n- `DragDrop` ‚Äî plain and simple drag and drop area\n- `FileInput` ‚Äî even more plain ‚Äúselect files‚Äù button\n- `ProgressBar` ‚Äî minimal progress bar that fills itself when upload progresses\n- `StatusBar` ‚Äî more detailed progress, pause/resume/cancel buttons, percentage, speed, uploaded/total sizes (included by default with `Dashboard`)\n- `Informer` ‚Äî send notifications like ‚Äúsmile‚Äù before taking a selfie or ‚Äúupload failed‚Äù when all is lost (also included by default with `Dashboard`)\n- `GoldenRetriever` ‚Äî restores files after a browser crash, like it‚Äôs nothing\n- `Form` ‚Äî collects metadata from `<form>` right before an Uppy upload, then optionally appends results back to the form\n- `ReduxDevTools` ‚Äî for your emerging [time traveling](https://github.com/gaearon/redux-devtools) needs\n- `GoogleDrive` ‚Äî select files from [Google Drive](https://www.google.com/drive/)\n- `Dropbox` ‚Äî select files from [Dropbox](https://www.dropbox.com/)\n- `Instagram` ‚Äî you guessed right ‚Äî select files from [Instagram](https://www.instagram.com/)\n- `Webcam` ‚Äî snap and record those selfies üì∑\n\n## Browser Support\n\n<a href=\"https://saucelabs.com/u/transloadit-uppy\">\n  <img src=\"https://saucelabs.com/browser-matrix/transloadit-uppy.svg\" alt=\"Sauce Test Status\"/>\n</a>\n\nWe aim to support IE10+ and recent versions of Safari, Edge, Chrome, Firefox and Opera.\n\n## FAQ\n\n### React support?\n\nYep, we have Uppy React components, please see [Uppy React docs](https://uppy.io/docs/react/).\n\n### Can I use it with Rails/Node/Go/PHP?\n\nYes, whatever you want on the backend will work with `XHRUpload` plugin, since it just does a `POST` or `PUT` request. If you want resumability with the Tus plugin, use [one of the tus server implementations](https://tus.io/implementations.html) üëåüèº\n\n### Do I need to install special service/server for it?\n\nNope, as mentioned previously, the `XHRUpload` plugin is old-school and just works with everything. However, you need [`uppy-server`](https://github.com/transloadit/uppy-server) if you‚Äôd like your users to be able to pick files from Instagram, Google Drive or Dropbox (more services coming). And you can add [tus](http://tus.io) if you want resumability.\n\n### Does Uppy support S3 uploads?\n\nYes, there is an S3 plugin, check out the [docs](https://uppy.io/docs/aws-s3/) for more!\n\n### Why is all this goodness free?\n\nTransloadit's team is small and we have a shared ambition to make a living from open source. By giving away projects like [tus.io](https://tus.io) and [Uppy](https://uppy.io), we're hoping to advance the state of the art, make life a tiny little bit better for everyone, and in doing so have rewarding jobs and get some eyes on our commercial service: [a content ingestion & processing platform](https://transloadit.com). Our thinking is that if just a fraction of our open source userbase can see the appeal of hosted versions straight from the source, that could already be enough to sustain our work. So far this is working out! We're able to dedicate 80% of our time to open source and haven't gone bankrupt just yet :D\n\n## Contributions are welcome\n\n - Contributor‚Äôs guide in [`website/src/docs/contributing.md`](website/src/docs/contributing.md)\n - Changelog to track our release progress (we aim to roll out a release every month): [`CHANGELOG.md`](CHANGELOG.md)\n\n## License\n\n[The MIT License](LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/transloadit/uppy.git"
  },
  "scripts": {
    "build": "npm-run-all --parallel build:js build:css --serial build:gzip size",
    "build:bundle": "node ./bin/build-js.js",
    "build:css": "node ./bin/build-css.js",
    "build:gzip": "node ./bin/gzip.js",
    "build:js": "npm-run-all build:bundle build:lib",
    "build:lib": "babel --version && babel src --source-maps -d lib",
    "clean": "rm -rf lib && rm -rf dist",
    "dev": "npm-run-all --parallel watch:example:js watch:css watch:example:browsersync",
    "lint": "eslint src test website/build-examples.js website/update.js website/themes/uppy/source/js/common.js",
    "lint-staged": "lint-staged",
    "lint:fix": "eslint src test website/build-examples.js website/update.js website/themes/uppy/source/js/common.js --fix",
    "prepublish": "npm-run-all clean build",
    "release": "npm version ${SEMANTIC:-patch} -m \"Release %s\" && git push && git push --tags && npm publish",
    "release:major": "env SEMANTIC=major npm run release",
    "release:minor": "env SEMANTIC=minor npm run release",
    "release:patch": "env SEMANTIC=patch npm run release",
    "size": "echo 'JS Bundle mingz:' && cat ./dist/uppy.min.js | gzip | wc -c && echo 'CSS Bundle mingz:' && cat ./dist/uppy.min.css | gzip | wc -c",
    "start": "npm-run-all --parallel watch start:server web:preview",
    "start:server": "cd ./node_modules/uppy-server && npm run start",
    "test": "npm run lint && npm run test:unit",
    "test:acceptance": "./bin/endtoend-build && wdio test/endtoend/wdio.remote.conf.js",
    "test:acceptance:handleservers": "bin/bootandkill-servers node test/acceptance/index.js",
    "test:acceptance:local": "./bin/endtoend-build && wdio test/endtoend/wdio.local.conf.js",
    "test:next-update": "next-update",
    "test:serve": "npm-run-all web:build --parallel start:server web:serve",
    "test:unit": "jest --testPathPattern=src --coverage",
    "test:watch": "jest --watch --testPathPattern=src",
    "travis:deletecache": "travis cache --delete",
    "watch": "npm-run-all --parallel watch:js watch:css",
    "watch:css": "onchange 'src/scss/**/*.scss' --initial --verbose -- npm run build:css",
    "watch:example": "npm-run-all --parallel watch:example:js watch:css watch:example:browsersync",
    "watch:example:browsersync": "browser-sync start --server examples/bundled-example --port 3452 --serveStatic dist --files \"examples/bundled-example/bundle.js, dist/uppy.min.css\"",
    "watch:example:js": "watchify -t babelify examples/bundled-example/main.js -o examples/bundled-example/bundle.js -vd",
    "watch:fast": "npm-run-all --parallel watch:css web:preview",
    "watch:js": "onchange 'src/**/*.js' --initial --verbose -- npm run build:bundle",
    "web": "npm-run-all web:clean web:build",
    "web:build": "cd website && node update.js && ./node_modules/.bin/hexo generate --silent && node build-examples.js",
    "web:bundle:update:watch": "onchange 'dist/**/*.css' 'dist/**/*.js' --initial --verbose -- node website/update.js",
    "web:clean": "cd website && ./node_modules/.bin/hexo clean",
    "web:deploy": "npm-run-all web:install web:disc web:build && ./bin/web-deploy",
    "web:disc": "node ./bin/disc.js",
    "web:examples:watch": "cd website && node build-examples.js watch",
    "web:generated-docs": "cd website && node node_modules/documentation/bin/documentation.js readme ../src/index.js --readme-file=src/docs/api.md --section 'Uppy Core & Plugins' -q --github -c doc-order.json",
    "web:install": "cd website && npm install",
    "web:preview": "npm-run-all --parallel web:examples:watch web:bundle:update:watch web:serve",
    "web:serve": "cd website && ./node_modules/.bin/hexo server",
    "web:update:frontpage:code:sample": "cd website && ./node_modules/.bin/hexo generate && cp -f public/frontpage-code-sample.html ./themes/uppy/layout/partials/frontpage-code-sample.html"
  },
  "unpkg": "dist/uppy.min.js",
  "version": "0.22.1"
}
