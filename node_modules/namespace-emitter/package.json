{
  "_args": [
    [
      {
        "raw": "namespace-emitter@^2.0.0",
        "scope": null,
        "escapedName": "namespace-emitter",
        "name": "namespace-emitter",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "C:\\wamp64\\www\\digital\\node_modules\\uppy"
    ]
  ],
  "_from": "namespace-emitter@>=2.0.0 <3.0.0",
  "_id": "namespace-emitter@2.0.0",
  "_inCache": true,
  "_location": "/namespace-emitter",
  "_nodeVersion": "6.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/namespace-emitter-2.0.0.tgz_1500681587858_0.11561641748994589"
  },
  "_npmUser": {
    "name": "sethvincent",
    "email": "sethvincent@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "namespace-emitter@^2.0.0",
    "scope": null,
    "escapedName": "namespace-emitter",
    "name": "namespace-emitter",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/uppy"
  ],
  "_resolved": "https://registry.npmjs.org/namespace-emitter/-/namespace-emitter-2.0.0.tgz",
  "_shasum": "9d06e88c03eb7118cb1bc776a2416fc949f63fd3",
  "_shrinkwrap": null,
  "_spec": "namespace-emitter@^2.0.0",
  "_where": "C:\\wamp64\\www\\digital\\node_modules\\uppy",
  "author": {
    "name": "sethvincent",
    "email": "sethvincent@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/sethvincent/namespace-emitter/issues"
  },
  "dependencies": {},
  "description": "tiny event emitter with namespaces",
  "devDependencies": {
    "budo": "^10.0.3",
    "documentation-readme": "^2.1.1",
    "nanobench": "^2.1.0",
    "standard": "^10.0.2",
    "tap-spec": "^4.1.1",
    "tape": "^4.7.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-U2o/9Lo1T7mlXt21a8A8HRCF4ZkmmjORBMbEGjfEwuuFo06wFFOZp3DR7zxEUWIgaertJ9XKzyU0C1OxECdQAg==",
    "shasum": "9d06e88c03eb7118cb1bc776a2416fc949f63fd3",
    "tarball": "https://registry.npmjs.org/namespace-emitter/-/namespace-emitter-2.0.0.tgz"
  },
  "gitHead": "f0fec0c4f6f23af01c5ff55893a83682516ad8bf",
  "homepage": "https://github.com/sethvincent/namespace-emitter#readme",
  "keywords": [
    "eventemitter",
    "events",
    "namespaces"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "sethvincent",
      "email": "sethvincent@gmail.com"
    }
  ],
  "name": "namespace-emitter",
  "optionalDependencies": {},
  "readme": "# namespace-emitter\n\nA small event emitter with namespaces.\n\nNot meant as a replacement for node's events module, but as a small component for browser js.\n\n## Install\n\n    npm install --save namespace-emitter\n\n## Example\n\n```js\nvar emitter = require('namespace-emitter')()\n\nemitter.on('*', function () {\n  console.log('all events emitted', this.event)\n})\n\nemitter.on('example', function () {\n  console.log('example event emitted')\n})\n\nemitter.emit('example')\n// -> example event emitted\n// -> all events emitted example\n\nemitter.on('demo', function () {\n  console.log('multiple events with `demo` namespace emitted', this.event)\n})\n\nemitter.emit('demo:cool')\n// -> all events emitted demo:cool\n// -> multiple events with `demo` namespace emitted demo:cool\n\nemitter.emit('demo:awesome')\n// -> all events emitted demo:awesome\n// -> multiple events with `demo` namespace emitted demo:awesome\n\nemitter.emit('demo:great')\n// -> all events emitted demo:great\n// -> multiple events with `demo` namespace emitted demo:great\n```\n\n## API\n\n### createNamespaceEmitter\n\nCreate an event emitter with namespaces\n\n**Examples**\n\n```javascript\nvar emitter = require('./index')()\n\nemitter.on('*', function () {\n  console.log('all events emitted', this.event)\n})\n\nemitter.on('example', function () {\n  console.log('example event emitted')\n})\n```\n\n### emit\n\nEmit an event. Optionally namespace the event. Handlers are fired in the order in which they were added with exact matches taking precedence. Separate the namespace and event with a `:`\n\n**Parameters**\n\n-   `event` **String** – the name of the event, with optional namespace\n-   `data` **...Any** – data variables that will be passed as arguments to the event listener\n\n**Examples**\n\n```javascript\nemitter.emit('example')\nemitter.emit('demo:test')\nemitter.emit('data', { example: true}, 'a string', 1)\n```\n\n### off\n\nStop listening to an event. Stop all listeners on an event by only passing the event name. Stop a single listener by passing that event handler as a callback.\nYou must be explicit about what will be unsubscribed: `emitter.off('demo')` will unsubscribe an `emitter.on('demo')` listener, \n`emitter.off('demo:example')` will unsubscribe an `emitter.on('demo:example')` listener\n\n**Parameters**\n\n-   `event` **String** \n-   `fn` **[Function]** – the specific handler\n\n**Examples**\n\n```javascript\nemitter.off('example')\nemitter.off('demo', function () {})\n```\n\n### on\n\nCreate en event listener.\n\n**Parameters**\n\n-   `event` **String** \n-   `fn` **Function** \n\n**Examples**\n\n```javascript\nemitter.on('example', function () {})\nemitter.on('demo', function () {})\n```\n\n### once\n\nCreate en event listener that fires once.\n\n**Parameters**\n\n-   `event` **String** \n-   `fn` **Function** \n\n**Examples**\n\n```javascript\nemitter.once('example', function () {})\nemitter.once('demo', function () {})\n```\n\n## License\n\n[MIT](LICENSE.md)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sethvincent/namespace-emitter.git"
  },
  "scripts": {
    "build-docs": "documentation-readme -s 'API'",
    "lint": "standard",
    "start": "budo example.js --live",
    "test": "tape test.js | tap-spec"
  },
  "version": "2.0.0"
}
