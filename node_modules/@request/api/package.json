{
  "_args": [
    [
      {
        "raw": "@request/api@^0.6.0",
        "scope": "@request",
        "escapedName": "@request%2fapi",
        "name": "@request/api",
        "rawSpec": "^0.6.0",
        "spec": ">=0.6.0 <0.7.0",
        "type": "range"
      },
      "C:\\wamp64\\www\\digital\\node_modules\\purest"
    ]
  ],
  "_from": "@request/api@>=0.6.0 <0.7.0",
  "_id": "@request/api@0.6.0",
  "_inCache": true,
  "_location": "/@request/api",
  "_nodeVersion": "5.9.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/api-0.6.0.tgz_1462293387916_0.45963562838733196"
  },
  "_npmUser": {
    "name": "simov",
    "email": "simeonvelichkov@gmail.com"
  },
  "_npmVersion": "2.15.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@request/api@^0.6.0",
    "scope": "@request",
    "escapedName": "@request%2fapi",
    "name": "@request/api",
    "rawSpec": "^0.6.0",
    "spec": ">=0.6.0 <0.7.0",
    "type": "range"
  },
  "_requiredBy": [
    "/purest"
  ],
  "_resolved": "https://registry.npmjs.org/@request/api/-/api-0.6.0.tgz",
  "_shasum": "e46e4c32e21db9ca72639701cba1ebfee06c1666",
  "_shrinkwrap": null,
  "_spec": "@request/api@^0.6.0",
  "_where": "C:\\wamp64\\www\\digital\\node_modules\\purest",
  "author": {
    "name": "Simeon Velichkov",
    "email": "simeonvelichkov@gmail.com",
    "url": "http://simov.github.io"
  },
  "bugs": {
    "url": "https://github.com/request/api/issues"
  },
  "dependencies": {
    "@request/interface": "^0.1.0",
    "deep-copy": "^1.1.2",
    "extend": "^3.0.0"
  },
  "description": "Sugar API for @request/interface consumers",
  "devDependencies": {
    "@request/client": "^0.1.0",
    "coveralls": "^2.11.6",
    "eslint": "^2.9.0",
    "eslint-config-standard": "^5.3.0",
    "eslint-plugin-promise": "^1.1.0",
    "eslint-plugin-standard": "^1.3.2",
    "istanbul": "^0.4.2",
    "mocha": "^2.4.5"
  },
  "directories": {},
  "dist": {
    "shasum": "e46e4c32e21db9ca72639701cba1ebfee06c1666",
    "tarball": "https://registry.npmjs.org/@request/api/-/api-0.6.0.tgz"
  },
  "files": [
    "config/",
    "lib/",
    "LICENSE",
    "README.md",
    "index.js"
  ],
  "gitHead": "fb08ba2c505cc79b2cc4600dc07f04b5886829c5",
  "homepage": "https://github.com/request/api",
  "keywords": [
    "http",
    "https",
    "request",
    "api"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "request",
      "email": "request@outofindex.com"
    },
    {
      "name": "simov",
      "email": "simeonvelichkov@gmail.com"
    }
  ],
  "name": "@request/api",
  "optionalDependencies": {},
  "readme": "\n# @request/api\n\n[![npm-version]][npm] [![travis-ci]][travis] [![coveralls-status]][coveralls]\n\n\n## Table of Contents\n\n- [Options](#options)\n- [Basic API](#basic-api)\n- [Chain API](#chain-api)\n- [Chain API Config](#chain-api-config)\n- [Promises](#promises)\n\n\n## Options\n\n```js\nvar api = require('@request/api')\nvar request = api({\n  // required\n  type: 'basic', // or 'chain'\n  // required\n  define: {\n    // HTTP request function\n    // that accepts @request/interface options object\n    request: require('@request/client')\n  },\n  // optional\n  config: {\n    // define your own methods and method aliases\n  }\n})\n```\n\n\n## Basic API\n\n```js\nrequest('url')\nrequest({options})\nrequest('url', function callback (err, res, body) {})\nrequest({options}, function callback (err, res, body) {})\nrequest('url', {options}, function callback (err, res, body) {})\n\nrequest.[HTTP_VERB]('url')\nrequest.[HTTP_VERB]({options})\nrequest.[HTTP_VERB]('url', function callback (err, res, body) {})\nrequest.[HTTP_VERB]({options}, function callback (err, res, body) {})\nrequest.[HTTP_VERB]('url', {options}, function callback (err, res, body) {})\n```\n\n```js\nvar api = require('@request/api')\nvar client = require('@request/client')\n\nvar request = api({\n  type: 'basic',\n  define: {\n    request: client\n  }\n})\n\n// GET http://localhost:6767?a=1\nrequest.get('http://localhost:6767', {qs: {a: 1}}, (err, res, body) => {\n  // request callback\n})\n```\n\n\n## Chain API\n\n```js\nvar api = require('@request/api')\nvar client = require('@request/client')\n\nvar request = api({\n  type: 'chain',\n  define: {\n    request: client\n  }\n})\n\n// GET http://localhost:6767?a=1\nrequest\n  .get('http://localhost:6767')\n  .qs({a: 1})\n  .callback((err, res, body) => {\n    // request callback\n  })\n  .request()\n```\n\n\n## Chain API Config\n\n```js\nvar api = require('@request/api')\nvar client = require('@request/client')\n\nvar request = api({\n  type: 'chain',\n  // API methods configuration\n  config: {\n    // HTTP methods\n    method: {\n      get: ['select'], // list of aliases\n      // ...\n    },\n    // @request/interface option methods\n    option: {\n      qs: ['where'], // list of aliases\n      // ...\n    },\n    // custom methods\n    custom: {\n      request: ['fetch', 'snatch', 'submit'], // list of aliases\n      // ...\n    }\n  },\n  // custom methods implementation\n  define: {\n    // `options` is always prepended as first argument\n    // any other custom arguments follows after that\n    request: (options, callback) => {\n      if (callback) {\n        // `options` contains the generated options object\n        options.callback = callback\n      }\n      // omit the return value if you want to chain further\n      return client(options)\n    }\n  }\n})\n\n// GET http://localhost:6767?a=1\nrequest\n  .select('http://localhost:6767')\n  .where({a: 1})\n  .fetch((err, res, body) => {\n    // request callback\n  })\n```\n\n\n## Promises\n\n```js\nvar api = require('@request/api')\nvar client = require('@request/client')\n\nfunction wrap (options) {\n  var promise = new Promise((resolve, reject) => {\n    options.callback = (err, res, body) => {\n      ;(err) ? reject(err) : resolve([res, body])\n    }\n  })\n  client(options)\n  return promise\n}\n```\n\n```js\nvar request = api({\n  type: 'basic',\n  define: {\n    request: wrap\n  }\n})\n// GET http://localhost:6767?a=1\nrequest.get('http://localhost:6767', {qs: 1})\n  .catch((err) => {})\n  .then((result) => {})\n```\n\n```js\nvar request = api({\n  type: 'chain',\n  define: {\n    request: wrap\n  }\n})\n// GET http://localhost:6767?a=1\nrequest\n  .get('http://localhost:6767')\n  .qs({a: 1})\n  .request()\n  .catch((err) => ())\n  .then((result) => ())\n```\n\n\n  [npm-version]: http://img.shields.io/npm/v/@request/api.svg?style=flat-square (NPM Version)\n  [travis-ci]: https://img.shields.io/travis/request/api/master.svg?style=flat-square (Build Status)\n  [coveralls-status]: https://img.shields.io/coveralls/request/api.svg?style=flat-square (Test Coverage)\n\n  [npm]: https://www.npmjs.org/package/@request/api\n  [travis]: https://travis-ci.org/request/api\n  [coveralls]: https://coveralls.io/r/request/api?branch=master\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/request/api.git"
  },
  "scripts": {
    "lint": "eslint lib/ test/ && echo Lint Passed",
    "test": "npm run lint && npm run test-ci",
    "test-ci": "mocha",
    "test-cov": "istanbul cover _mocha"
  },
  "version": "0.6.0"
}
