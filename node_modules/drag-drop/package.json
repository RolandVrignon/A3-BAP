{
  "_args": [
    [
      {
        "raw": "drag-drop@2.13.2",
        "scope": null,
        "escapedName": "drag-drop",
        "name": "drag-drop",
        "rawSpec": "2.13.2",
        "spec": "2.13.2",
        "type": "version"
      },
      "C:\\wamp64\\www\\digital\\node_modules\\uppy"
    ]
  ],
  "_from": "drag-drop@2.13.2",
  "_id": "drag-drop@2.13.2",
  "_inCache": true,
  "_location": "/drag-drop",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/drag-drop-2.13.2.tgz_1486529115748_0.8882545030210167"
  },
  "_npmUser": {
    "name": "feross",
    "email": "feross@feross.org"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "drag-drop@2.13.2",
    "scope": null,
    "escapedName": "drag-drop",
    "name": "drag-drop",
    "rawSpec": "2.13.2",
    "spec": "2.13.2",
    "type": "version"
  },
  "_requiredBy": [
    "/uppy"
  ],
  "_resolved": "https://registry.npmjs.org/drag-drop/-/drag-drop-2.13.2.tgz",
  "_shasum": "a01ff4459123f5ae0a8c8bd9bb38c625ccb81550",
  "_shrinkwrap": null,
  "_spec": "drag-drop@2.13.2",
  "_where": "C:\\wamp64\\www\\digital\\node_modules\\uppy",
  "author": {
    "name": "Feross Aboukhadijeh",
    "email": "feross@feross.org",
    "url": "http://feross.org/"
  },
  "bugs": {
    "url": "https://github.com/feross/drag-drop/issues"
  },
  "dependencies": {
    "blob-to-buffer": "^1.0.2",
    "flatten": "^1.0.2",
    "run-parallel": "^1.0.0"
  },
  "description": "HTML5 drag & drop for humans",
  "devDependencies": {
    "browserify": "^14.0.0",
    "ecstatic": "^2.1.0",
    "html-inline": "^1.2.0",
    "standard": "*",
    "tape": "^4.0.0",
    "uglify-js": "^2.4.15"
  },
  "directories": {},
  "dist": {
    "shasum": "a01ff4459123f5ae0a8c8bd9bb38c625ccb81550",
    "tarball": "https://registry.npmjs.org/drag-drop/-/drag-drop-2.13.2.tgz"
  },
  "gitHead": "1c5091696aabda2e7c2939ba11bc0819fbf60abe",
  "homepage": "https://github.com/feross/drag-drop",
  "keywords": [
    "drag",
    "drop",
    "dnd",
    "drag and drop",
    "drag drop",
    "html5",
    "drag & drop",
    "frontend",
    "browserify"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "feross",
      "email": "feross@feross.org"
    }
  ],
  "name": "drag-drop",
  "optionalDependencies": {},
  "readme": "# drag-drop [![travis](https://img.shields.io/travis/feross/drag-drop/master.svg)](https://travis-ci.org/feross/drag-drop) [![npm](https://img.shields.io/npm/v/drag-drop.svg)](https://npmjs.org/package/drag-drop) [![downloads](https://img.shields.io/npm/dm/drag-drop.svg)](https://npmjs.org/package/drag-drop)\n\n### HTML5 drag & drop for humans\n\nIn case you didn't know, the\n[HTML5 drag and drop API](https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications)\nis a\n[total disaster](http://www.quirksmode.org/blog/archives/2009/09/the_html5_drag.html)!\nThis is an attempt to make the API usable by mere mortals.\n\nThis module works in the browser with [browserify](http://browserify.org/).\n\n**Note:** If you do not use browserify, use the included standalone file\n[`dragdrop.min.js`](https://rawgit.com/feross/drag-drop/master/dragdrop.min.js). This exports a `DragDrop` function on `window`.\n\n### live demo\n\nSee [https://instant.io](https://instant.io).\n\n### features\n\n- simple API\n- adds a `drag` class to the drop target on hover, for easy styling!\n- optionally, get the file(s) as a Buffer (see [buffer](https://github.com/feross/buffer))\n\n### install\n\n```\nnpm install drag-drop\n```\n\n### usage\n\n```js\nvar dragDrop = require('drag-drop')\n\ndragDrop('#dropTarget', function (files, pos) {\n  console.log('Here are the dropped files', files)\n  console.log('Dropped at coordinates', pos.x, pos.y)\n})\n```\n\nAnother handy thing this does is add a `drag` class to the drop target when the user\nis dragging a file over the drop target. Useful for styling the drop target to make\nit obvious that this is a drop target!\n\n### complete example\n\n```js\nvar dragDrop = require('drag-drop')\n\n// You can pass in a DOM node or a selector string!\ndragDrop('#dropTarget', function (files) {\n  console.log('Here are the dropped files', files)\n\n  // `files` is an Array!\n  files.forEach(function (file) {\n    console.log(file.name)\n    console.log(file.size)\n    console.log(file.type)\n    console.log(file.lastModifiedData)\n    console.log(file.fullPath)\n\n    // convert the file to a Buffer that we can use!\n    var reader = new FileReader()\n    reader.addEventListener('load', function (e) {\n      // e.target.result is an ArrayBuffer\n      var arr = new Uint8Array(e.target.result)\n      var buffer = new Buffer(arr)\n\n      // do something with the buffer!\n    })\n    reader.addEventListener('error', function (err) {\n      console.error('FileReader error' + err)\n    })\n    reader.readAsArrayBuffer(file)\n  })\n})\n```\n\n### get files as buffers\n\nIf you prefer to access file data as Buffers, then just require drag-drop like this:\n\n```js\nvar dragDrop = require('drag-drop/buffer')\n\ndragDrop('#dropTarget', function (files) {\n  files.forEach(function (file) {\n    // file is actually a buffer!\n    console.log(file.readUInt32LE(0))\n    console.log(file.toJSON())\n    console.log(file.toString('hex')) // etc...\n\n    // but it still has all the normal file properties!\n    console.log(file.name)\n    console.log(file.size)\n    console.log(file.type)\n    console.log(file.lastModifiedDate)\n  })\n}\n```\n\n### remove listeners\n\nTo stop listening for drag & drop events and remove the event listeners, just use the\n`remove` function returned by the `dragDrop` function.\n\n```js\nvar dragDrop = require('drag-drop')\n\nvar remove = dragDrop('#dropTarget', function (files, pos) {\n  console.log('Here are the dropped files', files)\n  console.log('Dropped at coordinates', pos.x, pos.y)\n})\n\n// ... at some point in the future, stop listening for drag & drop events\nremove()\n```\n\n### detect `dragenter`, `dragover` and `dragleave` events\n\nInstead of passing just an `ondrop` function as the second argument, instead pass an\nobject with all the events you want to listen for:\n\n```js\nvar dragDrop = require('drag-drop')\n\ndragDrop('#dropTarget', {\n  onDrop: function (files, pos) {\n    console.log('Here are the dropped files', files)\n    console.log('Dropped at coordinates', pos.x, pos.y)\n  },\n  onDragEnter: function () {},\n  onDragOver: function () {},\n  onDragLeave: function () {}\n})\n```\n\n### detect drag-and-dropped text\n\nIf the user highlights text and drags it, we capture that as a separate event.\nListen for it like this:\n\n```js\nvar dragDrop = require('drag-drop')\n\ndragDrop('#dropTarget', {\n  onDropText: function (text, pos) {\n    console.log('Here is the dropped text', text)\n    console.log('Dropped at coordinates', pos.x, pos.y)\n  }\n})\n```\n\n### a note about `file://` urls\n\nDon't run your app from `file://`. For security reasons, browsers do not allow you to\nrun your app from `file://`.  In fact, many of the powerful storage APIs throw errors\nif you run the app locally from `file://`.\n\nInstead, start a local server and visit your site at `http://localhost:port`.\n\n### license\n\nMIT. Copyright (c) [Feross Aboukhadijeh](http://feross.org).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/feross/drag-drop.git"
  },
  "scripts": {
    "build": "browserify -s DragDrop -r ./ | uglifyjs -c warnings=false -m > dragdrop.min.js",
    "demo": "html-inline example.html | curl -sT- https://htmlb.in",
    "example": "npm run build && ecstatic",
    "test": "standard && tape test/*.js"
  },
  "version": "2.13.2"
}
