{
  "_args": [
    [
      {
        "raw": "express-prom-bundle@^3.1.0",
        "scope": null,
        "escapedName": "express-prom-bundle",
        "name": "express-prom-bundle",
        "rawSpec": "^3.1.0",
        "spec": ">=3.1.0 <4.0.0",
        "type": "range"
      },
      "C:\\wamp64\\www\\digital\\node_modules\\uppy-server"
    ]
  ],
  "_from": "express-prom-bundle@>=3.1.0 <4.0.0",
  "_id": "express-prom-bundle@3.2.1",
  "_inCache": true,
  "_location": "/express-prom-bundle",
  "_nodeVersion": "6.10.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/express-prom-bundle-3.2.1.tgz_1508437802034_0.05339326336979866"
  },
  "_npmUser": {
    "name": "disjunction",
    "email": "or@pluseq.com"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "express-prom-bundle@^3.1.0",
    "scope": null,
    "escapedName": "express-prom-bundle",
    "name": "express-prom-bundle",
    "rawSpec": "^3.1.0",
    "spec": ">=3.1.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/uppy-server"
  ],
  "_resolved": "https://registry.npmjs.org/express-prom-bundle/-/express-prom-bundle-3.2.1.tgz",
  "_shasum": "b273ea9f54c01819d34c2a1dfa6aeb23230469ab",
  "_shrinkwrap": null,
  "_spec": "express-prom-bundle@^3.1.0",
  "_where": "C:\\wamp64\\www\\digital\\node_modules\\uppy-server",
  "author": {
    "name": "Konstantin Pogorelov",
    "email": "or@pluseq.com"
  },
  "bugs": {
    "url": "https://github.com/jochen-schweizer/express-prom-bundle/issues"
  },
  "dependencies": {
    "on-finished": "^2.3.0",
    "prom-client": "^10.1.0",
    "url-value-parser": "^1.0.0"
  },
  "description": "express middleware with popular prometheus metrics in one bundle",
  "devDependencies": {
    "coveralls": "^2.13.1",
    "eslint": "^3.19.0",
    "express": "^4.15.3",
    "istanbul": "^0.4.5",
    "jasme": "^5.2.0",
    "koa": "^2.2.0",
    "koa-connect": "^2.0.0",
    "supertest": "^3.0.0",
    "supertest-koa-agent": "^0.3.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-ZiKPzKGaFBxoAnIDt0GUhGKfJrQp7tcecl/fqNOTk1mGAFMRmkCTkOSJAlr++yMkFaKkQA73hE6jkbJfoI2IgQ==",
    "shasum": "b273ea9f54c01819d34c2a1dfa6aeb23230469ab",
    "tarball": "https://registry.npmjs.org/express-prom-bundle/-/express-prom-bundle-3.2.1.tgz"
  },
  "engines": {
    "node": ">=6.0.0"
  },
  "gitHead": "c8996a7730d8de8409b65024873faff1f01aab1d",
  "homepage": "https://github.com/jochen-schweizer/express-prom-bundle#readme",
  "keywords": [
    "prometheus",
    "metrics",
    "express",
    "path",
    "method"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "disjunction",
      "email": "or@pluseq.com"
    }
  ],
  "name": "express-prom-bundle",
  "optionalDependencies": {},
  "readme": "[![build status](https://travis-ci.org/jochen-schweizer/express-prom-bundle.png)](https://travis-ci.org/jochen-schweizer/express-prom-bundle) [![Coverage Status](https://coveralls.io/repos/github/jochen-schweizer/express-prom-bundle/badge.svg?branch=master)](https://coveralls.io/github/jochen-schweizer/express-prom-bundle?branch=master) [![license](https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000)](https://www.tldrlegal.com/l/mit) [![NPM version](https://badge.fury.io/js/express-prom-bundle.png)](http://badge.fury.io/js/express-prom-bundle)\n\n# express prometheus bundle\n\nExpress middleware with popular prometheus metrics in one bundle. It's also compatible with koa v1 and v2 (see below).\n\nInternally it uses **prom-client**. See: https://github.com/siimon/prom-client\n\nIncluded metrics:\n\n* `up`: normally is just 1\n* `http_request_duration_seconds`: http latency histogram labeled with `status_code`, `method` and `path`\n\n## Install\n\n```\nnpm install express-prom-bundle\n```\n\n## Sample Usage\n\n```javascript\nconst promBundle = require(\"express-prom-bundle\");\nconst app = require(\"express\")();\nconst metricsMiddleware = promBundle({includeMethod: true});\n\napp.use(metricsMiddleware);\napp.use(/* your middleware */);\napp.listen(3000);\n```\n\n* call your endpoints\n* see your metrics here: [http://localhost:3000/metrics](http://localhost:3000/metrics)\n\n**ALERT!**\n\nThe order in which the routes are registered is important, since\n**only the routes registered after the express-prom-bundle will be measured**\n\nYou can use this to your advantage to bypass some of the routes.\nSee the example below.\n\n## Options\n\nWhich labels to include in `http_request_duration_seconds` metric:\n\n* **includeStatusCode**: HTTP status code (200, 400, 404 etc.), default: **true**\n* **includeMethod**: HTTP method (GET, PUT, ...), default: **false**\n* **includePath**: URL path (see importent details below), default: **false**\n* **customLabels**: an object containing extra labels, e.g. ```{project_name: 'hello_world'}```.\n  Most useful together with **transformLabels** callback, otherwise it's better to use native Prometheus relabeling.\n\nExtra transformation callbacks:\n\n* **normalizePath**: `function(req)` generates path values from express `req` (see details below)\n* **formatStatusCode**: `function(res)` producing final status code from express `res` object, e.g. you can combine `200`, `201` and `204` to just `2xx`.\n* **transformLabels**: `function(labels, req, res)` transforms the **labels** object, e.g. setting dynamic values to **customLabels**\n\nOther options:\n\n* **buckets**: buckets used for `http_request_duration_seconds` histogram\n* **autoregister**: if `/metrics` endpoint should be registered. (Default: **true**)\n\nDeprecated:\n\n* **whitelist**, **blacklist**: array of strings or regexp specifying which metrics to include/exclude (there are only 2 metrics)\n* **excludeRoutes**: array of strings or regexp specifying which routes should be skipped for `http_request_duration_seconds` metric. It uses `req.originalUrl` as subject when checking. You want to use express or meddleware features instead of this option.\n* **httpDurationMetricName**: name of the request duration histogram metric. (Default: `http_request_duration_seconds`)\n\n### More details on includePath option\n\nLet's say you want to have  latency statistics by URL path,\ne.g. separate metrics for `/my-app/user/`, `/products/by-category` etc.\n\nJust taking `req.path` as a label value won't work as IDs are often part of the URL,\nlike `/user/12352/profile`. So what we actually need is a path template.\nThe module tries to figure out what parts of the path are values or IDs,\nand what is an actual path. The example mentioned before would be\nnormalized to `/user/#val/profile` and that will become the value for the label.\n\nYou can override this magical behavior and define your own function by\nproviding an optional callback using **normalizePath** option.\nYou can also replace the default **normalizePath** function globally.\n\n```javascript\napp.use(promBundle(/* options? */));\n\n// let's reuse the existing one and just add some\n// functionality on top\nconst originalNormalize = promBundle.normalizePath;\npromBundle.normalizePath = (req, opts) => {\n  const path = originalNormalize(req, opts);\n  // count all docs (no matter which file) as a single path\n  return path.match(/^\\/docs/) ? '/docs/*' : path;\n};\n```\n\nFor more details:\n * [url-value-parser](https://www.npmjs.com/package/url-value-parser) - magic behind automatic path normalization\n * [normalizePath.js](https://github.com/jochen-schweizer/express-prom-bundle/blob/master/src/normalizePath.js) - source code for path processing\n\n\n\n## express example\n\nsetup std. metrics but exclude `up`-metric:\n\n```javascript\nconst express = require(\"express\");\nconst app = express();\nconst promBundle = require(\"express-prom-bundle\");\n\n// calls to this route will not appear in metrics\n// because it's applied before promBundle\napp.get(\"/status\", (req, res) => res.send(\"i am healthy\"));\n\n// register metrics collection for all routes\n// ... except those starting with /foo\napp.use(\"/((?!foo))*\", promBundle({includePath: true}));\n\n// this call will NOT appear in metrics,\n// because express will skip the metrics middleware\napp.get(\"/foo\", (req, res) => res.send(\"bar\"));\n\n// calls to this route will appear in metrics\napp.get(\"/hello\", (req, res) => res.send(\"ok\"));\n\napp.listen(3000);\n```\n\nSee an [advanced example on github](https://github.com/jochen-schweizer/express-prom-bundle/blob/master/advanced-example.js)\n\n## koa v2 example\n\n```javascript\nconst promBundle = require(\"express-prom-bundle\");\nconst Koa = require(\"koa\");\nconst c2k = require(\"koa-connect\");\nconst metricsMiddleware = promBundle({/* options */ });\n\nconst app = new Koa();\n\napp.use(c2k(metricsMiddleware));\napp.use(/* your middleware */);\napp.listen(3000);\n```\n\n## using with kraken.js\n\nHere is meddleware config sample, which can be used in a standard **kraken.js** application:\n\n```json\n{\n  \"middleware\": {\n    \"expressPromBundle\": {\n      \"route\": \"/((?!status|favicon.ico|robots.txt))*\",\n      \"priority\": 0,\n      \"module\": {\n        \"name\": \"express-prom-bundle\",\n        \"arguments\": [\n          {\n            \"includeMethod\": true,\n            \"buckets\": [0.1, 1, 5]\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n## Changelog\n\n * **3.2.0**\n    * added options **customLabels**, **transformLabels**\n    * upgrade **prom-client** to 10.1.0\n * **3.1.0**\n    * upgrade **prom-client** to 10.0.0\n * **3.0.0**\n    * upgrade dependencies, most notably **prom-client** to 9.0.0\n    * switch to koa v2 in koa unittest\n    * only node v6 or higher is supported (stop supporting node v4 and v5)\n    * switch to npm5 and use package-lock.json\n    * options added: includeStatusCode, formatStatusCode\n * **2.1.0**\n    * deprecate **excludeRoutes**, use **req.originalUrl** instead of **req.path**\n * **2.0.0**\n    * the reason for the version lift were:\n      * compliance to official naming recommendation: https://prometheus.io/docs/practices/naming/\n      * stopping promotion of an anti-pattern - see https://groups.google.com/d/msg/prometheus-developers/XjlOnDCK9qc/ovKzV3AIBwAJ\n      * dealing with **prom-client** being a singleton with a built-in registry\n    * main histogram metric renamed from `http_request_seconds` to `http_request_duration_seconds`\n    * options removed: **prefix**, **keepDefaultMetrics**\n    * factory removed (as the only reason of it was adding the prefix)\n    * upgrade prom-client to 6.3.0\n    * code style changed to the one closer to express\n\n\n * **1.2.1**\n    * upgrade prom-client to 6.1.2\n    * add options: includeMethod, includePath, keepDefaultMetrics\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jochen-schweizer/express-prom-bundle.git"
  },
  "scripts": {
    "test": "node_modules/jasme/run.js"
  },
  "version": "3.2.1"
}
